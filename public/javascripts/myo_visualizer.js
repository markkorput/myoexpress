// Generated by CoffeeScript 1.6.3
(function() {
  this.MyoVisualizer = Backbone.Model.extend({
    initialize: function() {
      var material,
        _this = this;
      this.scene = this.get('scene');
      this.myo_recorder = this.get('myo_recorder');
      this.meshes = [];
      this.passiveColor = new THREE.Color(Please.make_color({
        golden: false,
        hue: 12,
        saturation: .5,
        value: .8
      })[0]);
      this.activeColor = new THREE.Color(Please.make_color({
        golden: false,
        hue: 300,
        saturation: 1.0,
        value: .8
      })[0]);
      this.ghostColor = new THREE.Color(Please.make_color({
        golden: false,
        hue: 300,
        saturation: 0.8,
        value: .4
      })[0]);
      this.geometry = new THREE.SphereGeometry(50, 10, 10);
      this.myo_recorder.on('add', function(myo_record) {
        var material, mesh, orientation;
        orientation = myo_record.get('orientation');
        if (!orientation) {
          return;
        }
        material = new THREE.LineBasicMaterial();
        material.color = _this.activeColor;
        mesh = new THREE.Mesh(_this.geometry, material);
        mesh.position.set(orientation.x, orientation.y, orientation.z);
        mesh.position.multiply(new THREE.Vector3(1000, 1000, 1000));
        mesh.myo_record = myo_record;
        _this.meshes.push(mesh);
        _this.scene.add(mesh);
        return myo_record.on('remove', function(model) {
          mesh = _this._meshForRecord(model);
          _this.scene.remove(mesh);
          return _this.meshes = _.without(_this.meshes, model);
        });
      });
      material = new THREE.LineBasicMaterial();
      material.color = this.ghostColor;
      this.ghost_mesh = new THREE.Mesh(this.geometry, material);
      this.ghost_mesh.material.color = this.ghostColor;
      this.on('change:highlight', function(obj, value, attr) {
        return _.each(_this.meshes, function(mesh) {
          mesh.material.color = _this.passiveColor;
          if (_.contains(_.flatten([value]), mesh.myo_record.get('target'))) {
            return mesh.material.color = _this.activeColor;
          }
        });
      });
      if (this.get('myo_manager') && this.get('myo_manager').socket) {
        this.get('myo_manager').socket.on('myo-orientation', function(data) {
          var orientation;
          if (!_this.get('ghost')) {
            return;
          }
          orientation = data.orientation;
          _this.ghost_mesh.position.set(orientation.x, orientation.y, orientation.z);
          return _this.ghost_mesh.position.multiply(new THREE.Vector3(1000, 1000, 1000));
        });
      }
      if (this.get('ghost')) {
        console.log(this.ghost_mesh);
        this.scene.add(this.ghost_mesh);
      }
      return this.on('change:ghost', function(obj, val, attr) {
        if (val) {
          return _this.scene.add(_this.ghost_mesh);
        } else {
          return _this.scene.remove(_this.ghost_mesh);
        }
      });
    },
    _meshForRecord: function(record) {
      return _.find(this.meshes, function(mesh) {
        return mesh.myo_record === record;
      });
    }
  });

}).call(this);
